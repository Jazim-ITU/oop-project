#include "Admin.h"
using namespace std;

Admin::Admin(int id, const string& user, const string& mail,
    const string& pass, const string& level)
    : User(id, user, mail, pass), adminLevel(level) {
    
    permissions.push_back("VIEW_PRODUCTS");
    permissions.push_back("VIEW_ORDERS");
    if (level == "SUPER_ADMIN") {
        permissions.push_back("ADD_PRODUCTS");
        permissions.push_back("REMOVE_PRODUCTS");
        permissions.push_back("MANAGE_USERS");
    }
}

void Admin::displayInfo() const {
    cout << "=== Admin Information ===" << endl;
    cout << "ID: " << userId << endl;
    cout << "Username: " << username << endl;
    cout << "Email: " << email << endl;
    cout << "Admin Level: " << adminLevel << endl;
    cout << "Permissions: ";
    for (const string& perm : permissions) {
        cout << perm << " ";
    }
    cout << endl;
}

void Admin::addProduct(Product* product, Inventory& inventory) {
    if (product == nullptr) {
        cout << "Invalid product!" << endl;
        return;
    }

    
    bool hasPermission = false;
    for (const string& perm : permissions) {
        if (perm == "ADD_PRODUCTS") {
            hasPermission = true;
            break;
        }
    }

    if (!hasPermission) {
        cout << "Access denied! Insufficient permissions." << endl;
        return;
    }

    inventory.addProduct(product);
    cout << "Product added successfully by admin: " << username << endl;
}

void Admin::removeProduct(int productId, Inventory& inventory) {
   
    bool hasPermission = false;
    for (const string& perm : permissions) {
        if (perm == "REMOVE_PRODUCTS") {
            hasPermission = true;
            break;
        }
    }

    if (!hasPermission) {
        cout << "Access denied! Insufficient permissions." << endl;
        return;
    }

    inventory.removeProduct(productId);
    cout << "Product removed successfully by admin: " << username << endl;
}

void Admin::manageOrders() {
    cout << "Managing orders - Admin: " << username << endl;
    cout << "Order management functionality would be implemented here." << endl;
}

void Admin::generateReports() const {
    cout << "=== Admin Report ===" << endl;
    cout << "Generated by: " << username << endl;
    cout << "Admin Level: " << adminLevel << endl;
    cout << "Report generation functionality would be implemented here." << endl;
}

void Admin::addPermission(const string& permission) {
    permissions.push_back(permission);
    cout << "Permission '" << permission << "' added to admin: " << username << endl;
}
